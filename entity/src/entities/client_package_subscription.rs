//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.1

use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Serialize, Deserialize)]
#[sea_orm(table_name = "client_package_subscription")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub uuid: Uuid,
    pub client_id: i64,
    pub subscription_package_id: i64,
    #[sea_orm(column_type = "Float")]
    pub amount: f32,
    pub date_added: DateTime,
    pub expires_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::client::Entity",
        from = "Column::ClientId",
        to = "super::client::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    Client,
    #[sea_orm(
        belongs_to = "super::subscription_package::Entity",
        from = "Column::SubscriptionPackageId",
        to = "super::subscription_package::Column::Id",
        on_update = "Cascade",
        on_delete = "Restrict"
    )]
    SubscriptionPackage,
}

impl Related<super::client::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Client.def()
    }
}

impl Related<super::subscription_package::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::SubscriptionPackage.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
